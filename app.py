import io, os, uuid, zipfile, tempfile, shutil, sys
from datetime import datetime
import streamlit as st
import subprocess

APP_DIR = os.path.dirname(__file__)

def find_export_script() -> str | None:
    candidates = [
        os.path.join(APP_DIR, "exportword.py"),
        os.path.join(APP_DIR, "data", "exportword.py"),
    ]
    for p in candidates:
        if os.path.exists(p):
            return p
    return None

st.set_page_config(page_title="ƒê·ªìng b·ªô b·∫£n ·∫£nh - Web", layout="centered")
st.title("üõ† ƒê·ªìng b·ªô b·∫£n ·∫£nh (g·ªçi exportword.py)")

# --- UI ---
col1, col2 = st.columns(2)
loaibananh = col1.selectbox("Lo·∫°i b·∫£n ·∫£nh", [
    "kh√°m nghi·ªám hi·ªán tr∆∞·ªùng",
    "kh√°m nghi·ªám t·ª≠ thi",
    "kh√°m nghi·ªám hi·ªán tr∆∞·ªùng v√† t·ª≠ thi",
    "kh√°m ph∆∞∆°ng ti·ªán li√™n quan ƒë·∫øn tai n·∫°n giao th√¥ng",
    "T√πy ch·ªânh"
], key="loaibananh_sel")
loaibananh_custom = ""
if loaibananh == "T√πy ch·ªânh":
    loaibananh_custom = col2.text_input("Nh·∫≠p lo·∫°i b·∫£n ·∫£nh t√πy ch·ªânh", "", key="loaibananh_custom")

vu_viec = st.selectbox("T√™n v·ª• vi·ªác", [
    "Ch·∫øt ng∆∞·ªùi", "Gi·∫øt ng∆∞·ªùi", "C·ªë √Ω g√¢y th∆∞∆°ng t√≠ch",
    "Tai n·∫°n giao th√¥ng ƒë∆∞·ªùng b·ªô", "H·ªßy ho·∫°i t√†i s·∫£n",
    "Tr·ªôm c·∫Øp t√†i s·∫£n", "Hi·∫øp d√¢m", "T√πy ch·ªânh"
], key="vu_viec_sel")
vu_viec_custom = ""
if vu_viec == "T√πy ch·ªânh":
    vu_viec_custom = st.text_input("Nh·∫≠p t√™n v·ª• vi·ªác t√πy ch·ªânh", "", key="vu_viec_custom")

xrph = st.radio("S·ª± ki·ªán", ["x·∫£y ra", "ph√°t hi·ªán"], horizontal=True, key="xrph_radio")
col3, col4 = st.columns(2)
nkn = col3.date_input("Ng√†y KN", format="DD/MM/YYYY", key="nkn_date")
nxr = col4.date_input("Ng√†y x·∫£y ra", format="DD/MM/YYYY", key="nxr_date")
diadiem = st.text_input("ƒê·ªãa ƒëi·ªÉm x·∫£y ra", "", key="dd_input")

st.divider()
st.subheader("T·ªáp c·∫ßn t·∫£i l√™n")
up_tmba = st.file_uploader("TMBA.xlsm", type=["xlsm"], key="tmba_upl")
up_zip = st.file_uploader("·∫¢nh k√®m theo (ZIP)", type=["zip"], key="zip_upl",
                          help="N√©n to√†n b·ªô ·∫£nh v√†o 1 file .zip r·ªìi t·∫£i l√™n")

run_btn = st.button("üöÄ ƒê·ªìng b·ªô & Xu·∫•t file", type="primary", use_container_width=True, key="run_btn")

# --- RUN ---
if run_btn:
    # 0) Ki·ªÉm tra script
    script_path = find_export_script()
    if not script_path:
        st.error("Kh√¥ng t√¨m th·∫•y `exportword.py`. H√£y ƒë·∫∑t file n√†y ·ªü **g·ªëc repo** ho·∫∑c trong th∆∞ m·ª•c **data/**.")
        st.stop()

    # 1) Ki·ªÉm tra ƒë·∫ßu v√†o
    if up_tmba is None:
        st.error("Vui l√≤ng t·∫£i l√™n **TMBA.xlsm**.")
        st.stop()
    if up_zip is None:
        st.error("Vui l√≤ng t·∫£i l√™n **ZIP ·∫£nh**.")
        st.stop()

    # 2) T·∫°o th∆∞ m·ª•c l√†m vi·ªác t·∫°m
    workdir = tempfile.mkdtemp(prefix="dongbo_", dir=None)  # m·∫∑c ƒë·ªãnh d√πng /tmp tr√™n server
    imgdir = os.path.join(workdir, "images")
    os.makedirs(imgdir, exist_ok=True)

    # 3) L∆∞u TMBA.xlsm
    tmba_path = os.path.join(workdir, "TMBA.xlsm")
    with open(tmba_path, "wb") as f:
        f.write(up_tmba.read())

    # 4) Gi·∫£i n√©n ZIP ·∫£nh
    try:
        with zipfile.ZipFile(io.BytesIO(up_zip.read())) as zf:
            zf.extractall(imgdir)
    except Exception as e:
        st.error(f"Kh√¥ng gi·∫£i n√©n ƒë∆∞·ª£c ZIP ·∫£nh: {e}")
        shutil.rmtree(workdir, ignore_errors=True)
        st.stop()

    # 5) Chu·∫©n b·ªã bi·∫øn m√¥i tr∆∞·ªùng cho exportword.py
    env = os.environ.copy()
    env["EXPORT_FOLDER"] = workdir
    env["IMAGE_FOLDER"] = imgdir
    env["LOAI_BAN_ANH"] = (loaibananh_custom if loaibananh == "T√πy ch·ªânh" else loaibananh)
    env["vuviec"] = (vu_viec_custom if vu_viec == "T√πy ch·ªânh" else vu_viec)
    env["XRPH"] = xrph
    env["diadiem"] = diadiem
    env["NXR"] = nxr.strftime("%d/%m/%Y")
    env["NKN"] = nkn.strftime("%d/%m/%Y")

    st.info("ƒêang ch·∫°y exportword.py ‚Äî vui l√≤ng ƒë·ª£i‚Ä¶")
    with st.status("ƒêang x·ª≠ l√Ω‚Ä¶", expanded=True) as status:
        st.write(f"üìÅ Th∆∞ m·ª•c l√†m vi·ªác: `{workdir}`")
        st.write(f"üìÇ ·∫¢nh bung t·∫°i: `{imgdir}`")
        try:
            # 6) Ch·∫°y script
            result = subprocess.run(
                [sys.executable, script_path],
                cwd=workdir, env=env,
                capture_output=True, text=True, timeout=600
            )
            st.code(result.stdout or "(kh√¥ng c√≥ stdout)", language="bash")
            if result.returncode != 0:
                st.error("exportword.py tr·∫£ v·ªÅ l·ªói:")
                st.code(result.stderr or "(kh√¥ng c√≥ stderr)", language="bash")
                status.update(label="‚ùå Th·∫•t b·∫°i", state="error")
                # KH√îNG x√≥a workdir ƒë·ªÉ b·∫°n c√≥ th·ªÉ debug (tu·ª≥ b·∫°n gi·ªØ/xo√°)
                st.stop()
        except subprocess.TimeoutExpired:
            status.update(label="‚è±Ô∏è H·∫øt th·ªùi gian ch·ªù", state="error")
            st.error("Qu√° th·ªùi gian x·ª≠ l√Ω. Th·ª≠ gi·∫£m s·ªë ·∫£nh ho·∫∑c t·ªëi ∆∞u script.")
            st.stop()
        except Exception as e:
            status.update(label="‚ùå L·ªói khi ch·∫°y script", state="error")
            st.exception(e)
            st.stop()

        # 7) Thu th·∫≠p output (docx/pdf/zip‚Ä¶) t·ª´ workdir
        outputs = []
        for root, _, files in os.walk(workdir):
            for name in files:
                if name.lower().endswith((".docx", ".pdf", ".zip")):
                    outputs.append(os.path.join(root, name))

        if not outputs:
            status.update(label="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file xu·∫•t", state="warning")
            st.warning("Kh√¥ng th·∫•y file ƒë·∫ßu ra trong th∆∞ m·ª•c l√†m vi·ªác. Ki·ªÉm tra l·∫°i logic trong `exportword.py`.")
        else:
            status.update(label="‚úÖ Ho√†n t·∫•t", state="complete")
            st.success("ƒê·ªìng b·ªô th√†nh c√¥ng. T·∫£i file b√™n d∆∞·ªõi:")

            # S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t tr∆∞·ªõc
            outputs.sort(key=lambda p: os.path.getmtime(p), reverse=True)
            for p in outputs:
                with open(p, "rb") as f:
                    st.download_button(
                        f"‚¨áÔ∏è T·∫£i: {os.path.basename(p)}",
                        data=f.read(),
                        file_name=os.path.basename(p),
                        key=f"dl_{uuid.uuid4().hex}"
                    )

    # 8) (Tu·ª≥ ch·ªçn) d·ªçn t·∫°m: comment d√≤ng d∆∞·ªõi n·∫øu b·∫°n mu·ªën gi·ªØ l·∫°i ƒë·ªÉ debug
    # shutil.rmtree(workdir, ignore_errors=True)

st.caption("¬© PC09 Kh√°nh H√≤a ‚Ä¢ B·∫£n web ch·ªâ ƒë·ªìng b·ªô b·∫±ng exportword.py (kh√¥ng t·∫°o Thuy·∫øt minh)")
